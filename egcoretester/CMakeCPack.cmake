#include(InstallRequiredSystemLibraries)

#set(CPACK_SET_DESTDIR ON)

set(MYCPACK_PACKAGE_BASENAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_NAME "${MYCPACK_PACKAGE_BASENAME}${EG_PACKAGE_DEBUG}")
set(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_MAJOR_VERSION}")
set(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_MINOR_VERSION}")
set(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_PATCH_VERSION}")
set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}_${PROJECT_VERSION}_${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${PROJECT_NAME}_${PROJECT_VERSION}_Source")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}")

set(CPACK_PACKAGE_VENDOR "Eg of Example")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_BRIEF}")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${PROJECT_SOURCE_DIR}/README.txt")
set(CPACK_RESOURCE_FILE_README "${PROJECT_SOURCE_DIR}/README.txt")
set(CPACK_RESOURCE_FILE_WELCOME "${PROJECT_SOURCE_DIR}/README.txt")
set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/copyright.txt")
set(CPACK_PACKAGE_CONTACT "eg@example.com")

if (NOT "${EG_CPACK_GENERATOR}" STREQUAL "")
	set(CPACK_GENERATOR ${EG_CPACK_GENERATOR})
endif()
if (NOT "${EG_CPACK_SOURCE_GENERATOR}" STREQUAL "")
	set(CPACK_SOURCE_GENERATOR ${EG_CPACK_SOURCE_GENERATOR})
endif()

	# There is a bug in NSIS that does not handle full unix paths properly. Make
	# sure there is at least one set of four (4) backlasshes.
	set(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}\\\\logo.bmp")
	#set(CPACK_NSIS_INSTALLED_ICON_NAME "lib\\\\MyExecutable.exe")
	set(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
	set(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.example.com")
	set(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\http://www.example.com")
	set(CPACK_NSIS_CONTACT ${CPACK_PACKAGE_CONTACT})
	set(CPACK_NSIS_MODIFY_PATH ON)
	set(CPACK_DEBIAN_PACKAGE_DEPENDS "${PROJECT_PACKAGE_DEPENDENCIES_DEBIAN}")
	set(CPACK_DEBIAN_PACKAGE_SECTION "Libraries - Development")
	set(CPACK_RPM_PACKAGE_GROUP "Development/Libraries")
	set(CPACK_RPM_PACKAGE_REQUIRES "${CPACK_DEBIAN_PACKAGE_DEPENDS}")
	string(REPLACE "(" "" CPACK_RPM_PACKAGE_REQUIRES "${CPACK_RPM_PACKAGE_REQUIRES}")
	string(REPLACE ")" "" CPACK_RPM_PACKAGE_REQUIRES "${CPACK_RPM_PACKAGE_REQUIRES}")

if ("${EG_PACKAGE_DEBUG}" STREQUAL "")
	set(CPACK_DEBIAN_PACKAGE_CONFLICTS "${MYCPACK_PACKAGE_BASENAME}${EG_PACKAGE_DEBUG_CONST}")
else()
	set(CPACK_DEBIAN_PACKAGE_CONFLICTS "${MYCPACK_PACKAGE_BASENAME}")
endif()

	set(myCPACK_BUILD_TYPE -C ${CMAKE_BUILD_TYPE})
	if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
		set(myCPACK_BUILD_TYPE "")
	endif()
	add_custom_target(pkg COMMAND ${CMAKE_CPACK_COMMAND} ${myCPACK_BUILD_TYPE} --config ./CPackConfig.cmake WORKING_DIRECTORY ${PROJECT_BINARY_DIR})	

if (${EG_CMAKE_PLATFORM} STREQUAL "X_WIN32")
	add_custom_target(package_source COMMAND ${CMAKE_CPACK_COMMAND} --config ./CPackSourceConfig.cmake WORKING_DIRECTORY ${PROJECT_BINARY_DIR})	
endif()

include(CPack)

